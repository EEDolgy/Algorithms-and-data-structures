'''Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.'''

from collections import deque
import sys

def analyze(*obj):
    result = 0
    for item in obj:
        result += sys.getsizeof(item)
        if hasattr(item, '__iter__'):
            for it in item:
                result += sys.getsizeof(it)
    return result

# Вариант 1

num = int(input("Введите целое положительное трехзначное число: "))

a = num // 100
b = (num // 10) % 10
c = num % 10

sum_ = a + b + c
mult = a * b * c

print(f'Сумма и произведение цифр введенного числа равны: {sum_} и {mult}')

size_1 = analyze(num, a, b, c, sum_, mult)
print(f'Общий размер данных в 1 варианте программы равен {size_1}')
# На данных '456' объем занятой памяти - 84

# Вариант 2

num_array = list(input("Введите целое положительное трехзначное число: "))

sum_ = 0
mult = 1

for item in num_array:
    sum_ += int(item)
    mult *= int(item)

print(f'Сумма и произведение цифр введенного числа равны: {sum_} и {mult}')

size_2 = analyze(num_array, sum_, mult, item)
print(f'Общий размер данных в 2 варианте программы равен {size_2}')
# На данных '456' объем занятой памяти - 198
# На данных '"9" * 15' объем занятой памяти - 564
# На данных '9999' объем занятой памяти - 228
# На данных '"9" * 27' объем занятой памяти - 564

# Вариант 3

num_deq = deque(input("Введите целое положительное трехзначное число: "))
num_deq_mult = num_deq.copy()

sum_ = 0
mult = 1

for _ in range(len(num_deq)):
    sum_ += int(num_deq.pop())
    mult *= int(num_deq_mult.pop())

print(f'Сумма и произведение цифр введенного числа равны: {sum_} и {mult}')

size_3 = analyze(num_deq, num_deq_mult, sum_, mult)
print(f'Общий размер данных в 3 варианте программы равен {size_3}')
# На данных '456' объем занятой памяти - 652
# На данных '"9" * 15' объем занятой памяти - 658
# На данных '9999' объем занятой памяти - 652
# На данных '"9" * 27' объем занятой памяти - 662

# Выводы:
# (Эксперимент проводился для системы Windows 10 x 65, версия интерпретатора 32 bit)
# 1. Чем больше в программе используется коллекций, тем больше памяти
# она занимает, поэтому если есть необходимость в экономии памяти, лучше
# обходиться решениями без коллекций. Для конкретной задачи это целесообразно.
# Но решение сильно усложнилось бы для первого варианта в случае, если бы требовалось
# работать с числом с большим количеством знаков.
# 2. При выборе между вариантами решения 2 и 3, выигрывает 2 вариант, так как
# в нем используется одна коллекция, а не две. Тем не менее, при увеличении объема
# входных данных, разница между затратами в памяти обоих вариантов становится все
# менее значительной. А в определенный момент - вариант 3 начинает выигравать по памяти
# 3. Таким образом, общий вывод такой: при необходимости экономить память, на
# небольших объемах данных имеет смысл не пользоваться коллекциями совсем.
# Далее - на несколько возросшем объеме данных - преимущество будет иметь массив,
# а на совсем больших - коллекция deque.

